{
  "AutomaticReconnect": true,
  "SerialPortName": "COM7",
  "StartupDelayMs": 0,
  "IsConnecting": false,
  "IsEnabled": false,
  "LogIncomingData": false,
  "IsConnected": false,
  "BaudRate": 115200,
  "UpdateMessages": [
    {
      "Message": {
        "Interpreter": 1,
        "Expression": "var lsn = [$prop('Settings.LeftShoulderNeutral')];\r\nvar rsn = [$prop('Settings.RightShoulderNeutral')];\r\nvar lwn = [$prop('Settings.LeftWaistNeutral')];\r\nvar rwn = [$prop('Settings.RightWaistNeutral')];\r\n\r\nvar lsMax = [$prop('Settings.LeftShoulderMax')];\r\nvar rsMax = [$prop('Settings.RightShoulderMax')];\r\nvar lwMax = [$prop('Settings.LeftWaistMax')];\r\nvar rwMax = [$prop('Settings.RightWaistMax')];\r\n\r\nvar lsMin = [$prop('Settings.LeftShoulderMin')];\r\nvar rsMin = [$prop('Settings.RightShoulderMin')];\r\nvar lwMin = [$prop('Settings.LeftWaistMin')];\r\nvar rwMin = [$prop('Settings.RightWaistMin')];\r\n\r\nvar ctlCount = 5;\r\nvar valCount = 255 - ctlCount;\r\n\r\nvar lsCtl = 0;\r\nvar rsCtl = 1;\r\nvar lwCtl = 2;\r\nvar rwCtl = 3;\r\n\r\nfunction calcAbsFromPct(pct){\r\n  return (pct / 100) * (valCount);\r\n}\r\n\r\nfunction getCommandValFromAbs(abs){\r\n  return abs + ctlCount;\r\n}\r\n\r\nvar lsnPos = calcAbsFromPct(lsn);\r\nvar rsnPos = calcAbsFromPct(rsn);\r\nvar lwnPos = calcAbsFromPct(lwn);\r\nvar rwnPos = calcAbsFromPct(rwn);\r\n\r\nfunction concatCommand(command, servoIndex, val){\r\n  var above127Ctl = 4;\r\n  command = command.concat(String.fromCharCode(servoIndex));\r\n  if (val > 127) {\r\n    val -= 127;\r\n    command = command.concat(String.fromCharCode(above127Ctl));\r\n  }\r\n  val = Math.min(~~val, 127);\r\n  command = command.concat(String.fromCharCode(~~val));\r\n  return command;\r\n}\r\n\r\nfunction applyNeutralOffset(offsetPos, decimalValue){\r\n  decimalValue = Math.max(Math.min(decimalValue, 1), -1);\r\n  var posValue = offsetPos;\r\n  if (decimalValue > 0) {\r\n    posValue = offsetPos + ((valCount - offsetPos) * decimalValue)\r\n  } else if (decimalValue < 0) {\r\n    posValue = offsetPos - (offsetPos * Math.abs(decimalValue))\r\n  }\r\n  return posValue;\r\n}\r\n\r\nfunction getMaxTensionPos(offsetPos, maxVal){\r\n  return applyNeutralOffset(offsetPos, (maxVal / 100));\r\n}\r\n\r\nfunction getMinTensionPos(offsetPos, minVal){\r\n  return applyNeutralOffset(offsetPos, (minVal / 100)*-1);\r\n}\r\n\r\nif ($prop('Settings.TestNeutralTensions')) {\r\n  var command = \"\";\r\n  command = concatCommand(command, lsCtl, getCommandValFromAbs(lsnPos));\r\n  command = concatCommand(command, rsCtl, getCommandValFromAbs(rsnPos));\r\n  command = concatCommand(command, lwCtl, getCommandValFromAbs(lwnPos));\r\n  command = concatCommand(command, rwCtl, getCommandValFromAbs(rwnPos));\r\n  return command;\r\n} else if ($prop('Settings.TestMaxTensions')) {\r\n  var command = \"\";\r\n  command = concatCommand(command, lsCtl, getCommandValFromAbs(getMaxTensionPos(lsnPos, lsMax)));\r\n  command = concatCommand(command, rsCtl, getCommandValFromAbs(getMaxTensionPos(rsnPos, rsMax)));\r\n  command = concatCommand(command, lwCtl, getCommandValFromAbs(getMaxTensionPos(lwnPos, lwMax)));\r\n  command = concatCommand(command, rwCtl, getCommandValFromAbs(getMaxTensionPos(rwnPos, rwMax)));\r\n  return command;\r\n}else if ($prop('Settings.TestMinTensions')) {\r\n  var command = \"\";\r\n  command = concatCommand(command, lsCtl, getCommandValFromAbs(getMinTensionPos(lsnPos, lsMin)));\r\n  command = concatCommand(command, rsCtl, getCommandValFromAbs(getMinTensionPos(rsnPos, rsMin)));\r\n  command = concatCommand(command, lwCtl, getCommandValFromAbs(getMinTensionPos(lwnPos, lwMin)));\r\n  command = concatCommand(command, rwCtl, getCommandValFromAbs(getMinTensionPos(rwnPos, rwMin)));\r\n  return command;\r\n}\r\n"
      },
      "IsEnabled": false,
      "MaximumFrequency": 0
    },
    {
      "Message": {
        "Interpreter": 1,
        "Expression": "//Runtime\r\nvar lsn = [$prop('Settings.LeftShoulderNeutral')];\r\nvar rsn = [$prop('Settings.RightShoulderNeutral')];\r\nvar lwn = [$prop('Settings.LeftWaistNeutral')];\r\nvar rwn = [$prop('Settings.RightWaistNeutral')];\r\n\r\nvar lsMax = [$prop('Settings.LeftShoulderMax')];\r\nvar rsMax = [$prop('Settings.RightShoulderMax')];\r\nvar lwMax = [$prop('Settings.LeftWaistMax')];\r\nvar rwMax = [$prop('Settings.RightWaistMax')];\r\n\r\nvar lsMin = [$prop('Settings.LeftShoulderMin')];\r\nvar rsMin = [$prop('Settings.RightShoulderMin')];\r\nvar lwMin = [$prop('Settings.LeftWaistMin')];\r\nvar rwMin = [$prop('Settings.RightWaistMin')];\r\n\r\nvar ctlCount = 5;\r\nvar valCount = 255 - ctlCount;\r\n\r\nvar lsCtl = 0;\r\nvar rsCtl = 1;\r\nvar lwCtl = 2;\r\nvar rwCtl = 3;\r\n\r\nfunction calcAbsFromPct(pct) {\r\n  return (pct / 100) * (valCount);\r\n}\r\n\r\nfunction getCommandValFromAbs(abs) {\r\n  return abs + ctlCount;\r\n}\r\n\r\nvar lsnPos = calcAbsFromPct(lsn);\r\nvar rsnPos = calcAbsFromPct(rsn);\r\nvar lwnPos = calcAbsFromPct(lwn);\r\nvar rwnPos = calcAbsFromPct(rwn);\r\n\r\nfunction concatCommand(command, servoIndex, val) {\r\n  var above127Ctl = 4;\r\n  command = command.concat(String.fromCharCode(servoIndex));\r\n  if (val > 127) {\r\n    val -= 127;\r\n    command = command.concat(String.fromCharCode(above127Ctl));\r\n  }\r\n  val = Math.min(~~val, 127);\r\n  command = command.concat(String.fromCharCode(~~val));\r\n  return command;\r\n}\r\n\r\nfunction applyNeutralOffset(offsetPos, decimalValue) {\r\n  decimalValue = Math.max(Math.min(decimalValue, 1), -1);\r\n  var posValue = offsetPos;\r\n  if (decimalValue > 0) {\r\n    posValue = offsetPos + ((valCount - offsetPos) * decimalValue)\r\n  } else if (decimalValue < 0) {\r\n    posValue = offsetPos - (offsetPos * Math.abs(decimalValue))\r\n  }\r\n  return posValue;\r\n}\r\n\r\nfunction getMaxTensionPos(offsetPos, maxVal) {\r\n  return applyNeutralOffset(offsetPos, (maxVal / 100));\r\n}\r\n\r\nfunction getMinTensionPos(offsetPos, minVal) {\r\n  return applyNeutralOffset(offsetPos, (minVal / 100) * -1);\r\n}\r\n\r\nfunction SmoothItOut(servoName, val) {\r\n  // Low-pass IIR filtering of left and right tension values\r\n  var key = servoName + 'B4';\r\n  if (null == root[key]) {\r\n    root[key] = val;\t// initialize\r\n  }\r\n  var valB4 = root[key]; // previously filtered values\r\n  var tc = 1 + $prop('Settings.smooth');\r\n  valB4 += (val - valB4) / tc;\r\n  root[key] = valB4;\r\n  return valB4;\r\n}\r\n\r\nfunction ApplyMaxMin(val, minVal, maxVal) {\r\n  if (val > 0)\r\n    return val * maxVal;\r\n  else\r\n    return val * minVal;\r\n}\r\n\r\n// G-forces from SimHub properties\r\n/*\r\nvar gforce_x = $prop('ShakeITMotorsV3Plugin.Export.LateralGforce.Right')-$prop('ShakeITMotorsV3Plugin.Export.LateralGforce.Left')// acceleration\r\nvar gforce_y = $prop('ShakeITMotorsV3Plugin.Export.DecelGforce.Front') - $prop('ShakeITMotorsV3Plugin.Export.AccelGforce.Rear')// \r\nvar gforce_z = 0;//\r\n*/\r\nvar gforce_x = $prop('AccelerationSway');\t// lateral (yaw) \r\nvar gforce_y = - $prop('GlobalAccelerationG');\t// deceleration\r\nvar gforce_z = $prop('AccelerationHeave');\r\n\r\ngforce_x *= $prop('Settings.yaw_gain');\r\ngforce_y *= $prop('Settings.decel_gain');\r\ngforce_z *= $prop('Settings.heave_gain');\r\n\r\n\r\n// if (0 > gforce_y)\r\n//   gforce_y = 0;\t\t\t\t// non-negative deceleration\r\n\r\n\r\nvar lsVal = 0;\r\nvar rsVal = 0;\r\nvar lwVal = 0;\r\nvar rwVal = 0;\r\n\r\n// convert speed and yaw changes to left and right tension values\r\n// turning right should increase right harness tension (body pushed left)\r\nvar rs = Math.sqrt(gforce_y * gforce_y + gforce_x * gforce_x);\r\nvar ls = gforce_y + gforce_y - rs;\r\nif (0 > gforce_x) {\r\n  var t = rs;\t// negative gforce_x increases left tension\r\n  rs = ls;\r\n  ls = t;\r\n}\r\n\r\nvar rw = Math.sqrt(gforce_z * gforce_z + gforce_x * gforce_x);\r\nvar lw = gforce_z + gforce_z - rw;\r\nif (0 > gforce_x) {\r\n  var t = rw;\t// negative gforce_x increases left tension\r\n  rw = lw;\r\n  lw = t;\r\n}\r\n\r\n// Normalize to a value between 0 and 1\r\nrsVal = rs / 200000;\r\nlsVal = ls / 200000;\r\nrwVal = rw / 200000;\r\nlwVal = lw / 200000;\r\n\r\n//return lsVal.toString()+\",\"+lwVal.toString()+\",\"+rwVal.toString()+\",\"+rsVal.toString()\r\n\r\n\r\n\r\n\r\n//return rsVal;\r\n\r\n// // Assign values to belts\r\n// // TODO: recombine the values the way you really want them. For now just put heave to waist for test\r\n// lsVal = l;\r\n// rsVal = r;\r\n\r\n\r\nlsVal = SmoothItOut(\"ls\", lsVal);\r\nrsVal = SmoothItOut(\"rs\", rsVal);\r\nlwVal = SmoothItOut(\"lw\", lwVal);\r\nrwVal = SmoothItOut(\"rw\", rwVal);\r\n\r\n\r\nlsVal = ApplyMaxMin(lsMin, lsMax, lsVal);\r\nrsVal = ApplyMaxMin(rsMin, rsMax, rsVal);\r\nlwVal = ApplyMaxMin(lwMin, lwMax, lwVal);\r\nrwVal = ApplyMaxMin(rwMin, rwMax, rwVal);\r\n\r\nvar command = \"\";\r\ncommand = concatCommand(command, lsCtl, getCommandValFromAbs(applyNeutralOffset(lsnPos, lsVal)));\r\ncommand = concatCommand(command, rsCtl, getCommandValFromAbs(applyNeutralOffset(rsnPos, rsVal)));\r\ncommand = concatCommand(command, lwCtl, getCommandValFromAbs(applyNeutralOffset(lwnPos, lwVal)));\r\ncommand = concatCommand(command, rwCtl, getCommandValFromAbs(applyNeutralOffset(rwnPos, rwVal)));\r\nreturn command;\r\n"
      },
      "IsEnabled": true,
      "MaximumFrequency": 0
    }
  ],
  "OnConnectMessage": {
    "Expression": ""
  },
  "OnDisconnectMessage": {
    "Expression": ""
  },
  "DtrEnable": true,
  "RtsEnable": false,
  "EditorExpanded": true,
  "Name": "Custom Serial device",
  "Description": "Four Servo Belt Tensioner",
  "LastErrorDate": "2022-12-05T22:30:29.2214669-05:00",
  "LastErrorMessage": null,
  "IsFreezed": false,
  "SettingsBuilder": {
    "Settings": [
      {
        "Settings": [
          {
            "Maximum": 100,
            "Minimum": 0,
            "PropertyName": "LeftShoulderNeutral",
            "CurrentValue": 20,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Left Shoulder",
            "IsVisibleFormula": {
              "Expression": ""
            }
          },
          {
            "Maximum": 100,
            "Minimum": 0,
            "PropertyName": "RightShoulderNeutral",
            "CurrentValue": 20,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Right Shoulder",
            "IsVisibleFormula": {
              "Expression": ""
            }
          },
          {
            "Maximum": 100,
            "Minimum": 0,
            "PropertyName": "LeftWaistNeutral",
            "CurrentValue": 20,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Left Waist",
            "IsVisibleFormula": {
              "Expression": ""
            }
          },
          {
            "Maximum": 100,
            "Minimum": 0,
            "PropertyName": "RightWaistNeutral",
            "CurrentValue": 20,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "RightWaist",
            "IsVisibleFormula": {
              "Expression": ""
            }
          },
          {
            "PropertyName": "TestNeutralTensions",
            "CurrentValue": false,
            "Name": null,
            "TypeName": "BoolEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Test Neutral Tensions",
            "IsVisibleFormula": {
              "Expression": ""
            }
          }
        ],
        "Name": null,
        "TypeName": "GroupEntry",
        "IsEnabled": true,
        "IsEnabledFormula": {
          "Expression": ""
        },
        "IsVisible": true,
        "Label": "Neutral Tension Settings",
        "IsVisibleFormula": {
          "Expression": ""
        }
      },
      {
        "Settings": [
          {
            "Maximum": 100,
            "Minimum": 0,
            "PropertyName": "LeftShoulderMax",
            "CurrentValue": 96,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Left Shoulder",
            "IsVisibleFormula": {
              "Expression": ""
            }
          },
          {
            "Maximum": 100,
            "Minimum": 0,
            "PropertyName": "RightShoulderMax",
            "CurrentValue": 92,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Right Shoulder",
            "IsVisibleFormula": {
              "Expression": ""
            }
          },
          {
            "Maximum": 100,
            "Minimum": 0,
            "PropertyName": "LeftWaistMax",
            "CurrentValue": 98,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Left Waist",
            "IsVisibleFormula": {
              "Expression": ""
            }
          },
          {
            "Maximum": 100,
            "Minimum": 0,
            "PropertyName": "RightWaistMax",
            "CurrentValue": 94,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Right Waist",
            "IsVisibleFormula": {
              "Expression": ""
            }
          },
          {
            "PropertyName": "TestMaxTensions",
            "CurrentValue": false,
            "Name": null,
            "TypeName": "BoolEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Test Maximum Tensions",
            "IsVisibleFormula": {
              "Expression": ""
            }
          }
        ],
        "Name": null,
        "TypeName": "GroupEntry",
        "IsEnabled": true,
        "IsEnabledFormula": {
          "Expression": ""
        },
        "IsVisible": true,
        "Label": "Maximum Tension Settings",
        "IsVisibleFormula": {
          "Expression": ""
        }
      },
      {
        "Settings": [
          {
            "Maximum": 100,
            "Minimum": 0,
            "PropertyName": "LeftShoulderMin",
            "CurrentValue": 78,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Left Shoulder",
            "IsVisibleFormula": {
              "Expression": ""
            }
          },
          {
            "Maximum": 100,
            "Minimum": 0,
            "PropertyName": "RightShoulderMin",
            "CurrentValue": 84,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Right Shoulder",
            "IsVisibleFormula": {
              "Expression": ""
            }
          },
          {
            "Maximum": 100,
            "Minimum": 0,
            "PropertyName": "LeftWaistMin",
            "CurrentValue": 66,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Left Waist",
            "IsVisibleFormula": {
              "Expression": ""
            }
          },
          {
            "Maximum": 100,
            "Minimum": 0,
            "PropertyName": "RightWaistMin",
            "CurrentValue": 74,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "RightWaist",
            "IsVisibleFormula": {
              "Expression": ""
            }
          },
          {
            "PropertyName": "TestMinTensions",
            "CurrentValue": false,
            "Name": null,
            "TypeName": "BoolEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Test Minimum Tensions",
            "IsVisibleFormula": {
              "Expression": ""
            }
          }
        ],
        "Name": null,
        "TypeName": "GroupEntry",
        "IsEnabled": true,
        "IsEnabledFormula": {
          "Expression": ""
        },
        "IsVisible": true,
        "Label": "Minimum Tension Settings",
        "IsVisibleFormula": {
          "Expression": ""
        }
      },
      {
        "Settings": [
          {
            "Maximum": 100,
            "Minimum": 0,
            "PropertyName": "decel_gain",
            "CurrentValue": 75,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Decel Gain",
            "IsVisibleFormula": {
              "Expression": ""
            }
          },
          {
            "Maximum": 80,
            "Minimum": 0,
            "PropertyName": "yaw_gain",
            "CurrentValue": 62,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Yaw Gain",
            "IsVisibleFormula": {
              "Expression": ""
            }
          },
          {
            "Maximum": 80,
            "Minimum": 0,
            "PropertyName": "heave_gain",
            "CurrentValue": 58,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Heave Gain",
            "IsVisibleFormula": {
              "Expression": ""
            }
          },
          {
            "Maximum": 4,
            "Minimum": 0,
            "PropertyName": "smooth",
            "CurrentValue": 4,
            "Name": null,
            "TypeName": "SliderEntry",
            "IsEnabled": true,
            "IsEnabledFormula": {
              "Expression": ""
            },
            "IsVisible": true,
            "Label": "Smoothing",
            "IsVisibleFormula": {
              "Expression": ""
            }
          }
        ],
        "Name": null,
        "TypeName": "GroupEntry",
        "IsEnabled": true,
        "IsEnabledFormula": {
          "Expression": ""
        },
        "IsVisible": true,
        "Label": "Sim Settings",
        "IsVisibleFormula": {
          "Expression": ""
        }
      }
    ],
    "IsEditMode": false
  }
}